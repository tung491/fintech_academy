generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:../finacademy.db"
}

model User {
  id           String           @id @default(cuid())
  email        String           @unique
  passwordHash String           @map("password_hash")
  firstName    String           @map("first_name")
  lastName     String           @map("last_name")
  role         String           @default("student")
  createdAt    DateTime         @default(now()) @map("created_at")
  updatedAt    DateTime         @updatedAt @map("updated_at")
  bookmarks    Bookmark[]
  quizAttempts QuizAttempt[]
  enrollments  UserEnrollment[]
  progress     UserProgress[]
  certificates Certificate[]

  @@map("users")
}

model Course {
  id                String                 @id @default(cuid())
  title             String
  slug              String                 @unique
  description       String?
  shortDescription  String?                @map("short_description")
  categoryId        String?                @map("category_id")
  level             String                 @default("beginner") // beginner, intermediate, advanced
  duration          String?                // e.g., "4 weeks", "6 weeks"
  estimatedHours    Float?                 @map("estimated_hours")
  price             Float?                 @default(0) // price in cents
  originalPrice     Float?                 @map("original_price") // for showing discounts
  instructor        String?                // instructor name
  instructorBio     String?                @map("instructor_bio")
  thumbnailUrl      String?                @map("thumbnail_url")
  orderIndex        Int                    @map("order_index")
  isPublished       Boolean                @default(false) @map("is_published")
  isFeatured        Boolean                @default(false) @map("is_featured")
  skillsLearned     String?                @map("skills_learned") // JSON array of skills
  targetAudience    String?                @map("target_audience")
  createdAt         DateTime               @default(now()) @map("created_at")
  updatedAt         DateTime               @updatedAt @map("updated_at")
  category          CourseCategory?        @relation(fields: [categoryId], references: [id])
  enrollments       UserEnrollment[]
  weeks             Week[]
  prerequisites     CoursePrerequisite[]   @relation("CoursePrerequisites")
  dependentCourses  CoursePrerequisite[]   @relation("PrerequisiteCourses")
  certificates      Certificate[]

  @@map("courses")
}

model Week {
  id                 String   @id @default(cuid())
  courseId           String   @map("course_id")
  weekNumber         Int      @map("week_number")
  title              String
  overview           String?
  learningObjectives String?  @map("learning_objectives")
  estimatedHours     Float?   @map("estimated_hours")
  createdAt          DateTime @default(now()) @map("created_at")
  updatedAt          DateTime @updatedAt @map("updated_at")
  lessons            Lesson[]
  quizzes            Quiz[]
  course             Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@unique([courseId, weekNumber])
  @@map("weeks")
}

model Lesson {
  id              String         @id @default(cuid())
  weekId          String         @map("week_id")
  title           String
  slug            String
  content         String
  orderIndex      Int            @map("order_index")
  lessonType      String         @default("lecture") @map("lesson_type")
  durationMinutes Int?           @map("duration_minutes")
  createdAt       DateTime       @default(now()) @map("created_at")
  updatedAt       DateTime       @updatedAt @map("updated_at")
  bookmarks       Bookmark[]
  week            Week           @relation(fields: [weekId], references: [id], onDelete: Cascade)
  progress        UserProgress[]

  @@unique([weekId, slug])
  @@map("lessons")
}

model Quiz {
  id               String        @id @default(cuid())
  weekId           String        @map("week_id")
  title            String
  description      String?
  passingScore     Int           @default(70) @map("passing_score")
  maxAttempts      Int           @default(3) @map("max_attempts")
  timeLimitMinutes Int?          @map("time_limit_minutes")
  createdAt        DateTime      @default(now()) @map("created_at")
  updatedAt        DateTime      @updatedAt @map("updated_at")
  questions        Question[]
  attempts         QuizAttempt[]
  week             Week          @relation(fields: [weekId], references: [id], onDelete: Cascade)

  @@map("quizzes")
}

model Question {
  id            String   @id @default(cuid())
  quizId        String   @map("quiz_id")
  questionText  String   @map("question_text")
  questionType  String   @map("question_type")
  options       String?
  correctAnswer String   @map("correct_answer")
  explanation   String?
  points        Int      @default(1)
  orderIndex    Int      @map("order_index")
  createdAt     DateTime @default(now()) @map("created_at")
  quiz          Quiz     @relation(fields: [quizId], references: [id], onDelete: Cascade)

  @@map("questions")
}

model UserProgress {
  id               String    @id @default(cuid())
  userId           String    @map("user_id")
  lessonId         String    @map("lesson_id")
  completed        Boolean   @default(false)
  completedAt      DateTime? @map("completed_at")
  timeSpentMinutes Int       @default(0) @map("time_spent_minutes")
  createdAt        DateTime  @default(now()) @map("created_at")
  updatedAt        DateTime  @updatedAt @map("updated_at")
  lesson           Lesson    @relation(fields: [lessonId], references: [id], onDelete: Cascade)
  user             User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, lessonId])
  @@map("user_progress")
}

model QuizAttempt {
  id               String    @id @default(cuid())
  userId           String    @map("user_id")
  quizId           String    @map("quiz_id")
  score            Float?
  passed           Boolean   @default(false)
  answers          String?
  startedAt        DateTime  @default(now()) @map("started_at")
  completedAt      DateTime? @map("completed_at")
  timeTakenMinutes Int?      @map("time_taken_minutes")
  quiz             Quiz      @relation(fields: [quizId], references: [id], onDelete: Cascade)
  user             User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("quiz_attempts")
}

model UserEnrollment {
  id                 String    @id @default(cuid())
  userId             String    @map("user_id")
  courseId           String    @map("course_id")
  enrolledAt         DateTime  @default(now()) @map("enrolled_at")
  completedAt        DateTime? @map("completed_at")
  progressPercentage Float     @default(0) @map("progress_percentage")
  course             Course    @relation(fields: [courseId], references: [id], onDelete: Cascade)
  user               User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, courseId])
  @@map("user_enrollments")
}

model Bookmark {
  id          String   @id @default(cuid())
  userId      String   @map("user_id")
  lessonId    String   @map("lesson_id")
  title       String
  description String?
  sectionText String?  @map("section_text")
  position    Int?
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  lesson      Lesson   @relation(fields: [lessonId], references: [id], onDelete: Cascade)

  @@unique([userId, lessonId, position])
  @@map("bookmarks")
}

model CourseCategory {
  id          String   @id @default(cuid())
  name        String   @unique
  slug        String   @unique
  description String?
  color       String?  // hex color for UI
  icon        String?  // icon name or emoji
  orderIndex  Int      @map("order_index")
  isActive    Boolean  @default(true) @map("is_active")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  courses     Course[]

  @@map("course_categories")
}

model CoursePrerequisite {
  id             String   @id @default(cuid())
  courseId       String   @map("course_id")
  prerequisiteId String   @map("prerequisite_id")
  isRequired     Boolean  @default(true) @map("is_required")
  createdAt      DateTime @default(now()) @map("created_at")
  course         Course   @relation("CoursePrerequisites", fields: [courseId], references: [id], onDelete: Cascade)
  prerequisite   Course   @relation("PrerequisiteCourses", fields: [prerequisiteId], references: [id], onDelete: Cascade)

  @@unique([courseId, prerequisiteId])
  @@map("course_prerequisites")
}

model Certificate {
  id           String    @id @default(cuid())
  userId       String    @map("user_id")
  courseId     String    @map("course_id")
  issuedAt     DateTime  @default(now()) @map("issued_at")
  certificateUrl String? @map("certificate_url")
  verificationCode String @unique @map("verification_code")
  createdAt    DateTime  @default(now()) @map("created_at")
  user         User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  course       Course    @relation(fields: [courseId], references: [id], onDelete: Cascade)

  @@unique([userId, courseId])
  @@map("certificates")
}
